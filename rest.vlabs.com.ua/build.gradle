buildscript
{
    ext
    {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories
    {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies
    {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'ua.com.vlabs'
version = '0.2.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories
{
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies
{
    // https://mvnrepository.com/artifact/org.springframework/spring-core
    compile group: 'org.springframework', name: 'spring-core', version: '5.0.4.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.0.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.0.0.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto
    compile group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.0.3.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-web
    compile group: 'org.springframework.security', name: 'spring-security-web', version: '5.0.3.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-config
    compile group: 'org.springframework.security', name: 'spring-security-config', version: '5.0.3.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mobile
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-mobile', version: '1.5.10.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.0.0.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mail
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '2.0.2.RELEASE'

    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.8-dmr'

    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'

    // https://mvnrepository.com/artifact/org.json/json
    compile group: 'org.json', name: 'json', version: '20180130'

    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.9.9'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.0.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-test
    testCompile group: 'org.springframework.security', name: 'spring-security-test', version: '5.0.3.RELEASE'

    // https://mvnrepository.com/artifact/junit/junit
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def persistantToList(File f) {
  def includes = []
  f.eachLine { line ->
    //ignore comments and empty lines
      if (!line.startsWith('#') && !line.isEmpty()) {
       includes.add(line)
    }
  }
  return includes
}


task cleanStaffUIDirectory(){
    group = 'clean'
    description = 'Clean Staff UI directory'
    doLast {
        FileTree StaffUIUIDirectoryTree = fileTree(dir: "./src/main/resources/static/staff")
        def filesToBeKept = persistantToList(file('./src/main/resources/static/staff/.persistant'))
        StaffUIUIDirectoryTree.exclude filesToBeKept

        println "The following files / folders are deleted from Staff UI directory: "
        StaffUIUIDirectoryTree.visit{ def fileVisitDetails ->
            def file = fileVisitDetails.file
            println file
            delete(file)
        }
    }
}

task buildStaffUI(type: Exec) {
  dependsOn cleanStaffUIDirectory
  group = 'build'
  description = "Build Staff UI for production"
  executable "bash"
  args "-c","cd ../ui.vlabs.com.ua; npm run buildProd"
}

task deployStaffUI(type: Copy, dependsOn: 'buildStaffUI') {
  group = 'deploy'
  description = "Deploy Staff UI for production"
  from '../ui.vlabs.com.ua/dist'
  into './src/main/resources/static/staff'
}


task cleanHCDirectory(){
    group = 'clean'
    description = 'Clean HelpClips directory'
    doLast {
        FileTree HelpClipsDirectoryTree = fileTree(dir: "./src/main/resources/static/hc")
        def filesToBeKept = persistantToList(file('./src/main/resources/static/hc/.persistant'))
        HelpClipsDirectoryTree.exclude filesToBeKept

        println "The following files / folders are deleted from HelpClips directory: "
        HelpClipsDirectoryTree.visit{ def fileVisitDetails ->
            def file = fileVisitDetails.file
            println file
            delete(file)
        }
    }
}

task buildHC(type: Exec) {
  dependsOn cleanHCDirectory
  group = 'build'
  description = "Build HelpClips for production"
  executable "bash"
  args "-c","cd ../ff.vlabs.com.ua; npm run buildProd"
}

task deployHC(type: Copy, dependsOn: 'buildHC') {
  group = 'deploy'
  description = "Deploy HelpClips for production"
  from '../ff.vlabs.com.ua/dist'
  into './src/main/resources/static/hc'
}


task cleanVLabsDirectory(){
    group = 'clean'
    description = 'Clean VLabs directory'
    doLast {
        FileTree VLabsDirectoryTree = fileTree(dir: "./src/main/resources/static/vlabs")
        def filesToBeKept = persistantToList(file('./src/main/resources/static/vlabs/.persistant'))
        VLabsDirectoryTree.exclude filesToBeKept

        println "The following files / folders are deleted from VLabs directory: "
        VLabsDirectoryTree.visit{ def fileVisitDetails ->
            def file = fileVisitDetails.file
            println file
            delete(file)
        }
    }
}

task buildVLabs(type: Exec) {
  dependsOn cleanVLabsDirectory
  group = 'build'
  description = "Compile VLabs for production"
  executable "bash"
  args "-c","cd ../vl.vlabs.com.ua/vlabs; ./build-all-prod.sh"
}

task deployVLabs(type: Copy, dependsOn: 'buildVLabs') {
  group = 'deploy'
  description = "Deploy VLabs for production"
  from '../vl.vlabs.com.ua/vlabs/build'
  into './src/main/resources/static/vlabs'
}

task deployAll() {
  group = 'deploy'
  description = "Prepare production bootJar"
  dependsOn deployVLabs
  dependsOn deployStaffUI
  dependsOn deployHC
}
